[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 RCLabels authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/RCLabels.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"RCLabels","text":"Working matrices often requires manipulating row column labels achieve desired outcomes matrix mathematics. RCLabels package (Row Column Labels) provides convenient tools manipulating labels.","code":""},{"path":"/articles/RCLabels.html","id":"use-cases","dir":"Articles","previous_headings":"","what":"Use cases","title":"RCLabels","text":"Two applications matrix mathematics input-output analysis economics physical supply-use table (PSUT) matrices energy conversion chain (ECC) analysis. contexts, row column labels describe processing stages flows goods services processing stages. Row column labels can benefit applications, ensuring like quantities added, subtracted, multiplied, divided, etc., provided row column labels respected matrix operations. One package respects row column labels matsbyname, thereby making economic ECC input-output analyses easier. Easy manipulation row column labels , therefore, enabling capability using matsbyname package. package (RCLabels) provides easy manipulation row column labels. fact, matsbyname package uses RCLabels functions internally.","code":""},{"path":"/articles/RCLabels.html","id":"label-structure","dir":"Articles","previous_headings":"","what":"Label structure","title":"RCLabels","text":"Row column labels always character strings, often prefix–suffix structure, prefix suffix denoted separator delimited ways. Example row column labels include “pref -> suff” (separator “->”) “pref [suff]” (suffix delimited “ [” “]”) “(pref) (suff)” (prefix suffix surrounded “(” “)”) “pref.suff” (separator “.”) Prefixes usually “thing” interest, e.g. energy carrier (“Coal”) processing stage energy conversion chain (“Main activity producer electricity plants”). Suffixes usually modifiers metadata thing (prefix). Suffixes can describe destination energy carrier (“Light [-> Industry USA]”). Suffixes can describe output processing stage (“Production [Coal ZAR]”).","code":""},{"path":"/articles/RCLabels.html","id":"working-with-row-and-column-labels","dir":"Articles","previous_headings":"","what":"Working with row and column labels","title":"RCLabels","text":"RCLabels package streamlines working row column labels.","code":""},{"path":"/articles/RCLabels.html","id":"notation","dir":"Articles","previous_headings":"Working with row and column labels","what":"Notation","title":"RCLabels","text":"RCLabels enables creation notation objects describe structure row column label via notation_vec() function. Several notation objects provided convenience within RCLabels. Note identical pref_end suff_start values (shown notations ) interpreted single delimiter throughout RCLables package. Empty strings (\"\") mean indication given start end prefix suffix.","code":"# Create a notation object. my_notation <- notation_vec(pref_start = \"(\", pref_end = \") \",                             suff_start = \"[\", suff_end = \"]\")  # Notation objects are character vectors. my_notation #> pref_start   pref_end suff_start   suff_end  #>        \"(\"       \") \"        \"[\"        \"]\" arrow_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"     \" -> \"     \" -> \"         \"\" paren_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"       \" (\"       \" (\"        \")\" bracket_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"       \" [\"       \" [\"        \"]\" first_dot_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"        \".\"        \".\"         \"\" from_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"  \" [from \"  \" [from \"        \"]\" of_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"    \" [of \"    \" [of \"        \"]\" to_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"    \" [to \"    \" [to \"        \"]\" bracket_arrow_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"    \" [-> \"    \" [-> \"        \"]\""},{"path":"/articles/RCLabels.html","id":"creating-row-and-column-labels","dir":"Articles","previous_headings":"Working with row and column labels","what":"Creating row and column labels","title":"RCLabels","text":"Row column labels can created paste_pref_suff() function","code":"my_label <- paste_pref_suff(pref = \"Coal\", suff = \"from Coal mines in USA\",                              notation = my_notation) my_label #> [1] \"(Coal) [from Coal mines in USA]\""},{"path":"/articles/RCLabels.html","id":"manipulating-row-and-column-labels-prefixes-and-suffixes","dir":"Articles","previous_headings":"Working with row and column labels","what":"Manipulating row and column labels (prefixes and suffixes)","title":"RCLabels","text":"Row column labels can manipulated using several helpful functions. prefix suffix can extracted row column label.","code":"# Split the prefix from the suffix to obtain a named list of strings. split_pref_suff(my_label, notation = my_notation) #> $pref #> [1] \"Coal\" #>  #> $suff #> [1] \"from Coal mines in USA\"  # Flip the prefix and suffix, maintaining the same notation. flip_pref_suff(my_label, notation = my_notation) #> [1] \"(from Coal mines in USA) [Coal]\"  # Change the notation. switch_notation(my_label, from = my_notation, to = paren_notation) #> [1] \"Coal (from Coal mines in USA)\"  # Change the notation and flip the prefix and suffix. switch_notation(my_label, from = my_notation, to = paren_notation, flip = TRUE) #> [1] \"from Coal mines in USA (Coal)\" get_pref_suff(my_label, which = \"pref\", notation = my_notation) #>   pref  #> \"Coal\" get_pref_suff(my_label, which = \"suff\", notation = my_notation) #>                     suff  #> \"from Coal mines in USA\""},{"path":"/articles/RCLabels.html","id":"vectors-and-lists-of-row-and-column-labels","dir":"Articles","previous_headings":"Working with row and column labels","what":"Vectors and lists of row and column labels","title":"RCLabels","text":"functions RCLabels work vectors lists row column labels. feature means functions RCLabels can used data frames. Note transpose = TRUE ensures single list column created.","code":"labels <- c(\"a [of b in c]\", \"d [of e in f]\", \"g [of h in i]\") labels #> [1] \"a [of b in c]\" \"d [of e in f]\" \"g [of h in i]\"  split_pref_suff(labels, notation = bracket_notation) #> $pref #> [1] \"a\" \"d\" \"g\" #>  #> $suff #> [1] \"of b in c\" \"of e in f\" \"of h in i\" labels #> [1] \"a [of b in c]\" \"d [of e in f]\" \"g [of h in i]\"  df <- tibble::tibble(labels = labels) result <- df %>%    dplyr::mutate(     split = split_pref_suff(labels, notation = bracket_notation, transpose = TRUE)   ) result$split[[1]] #> $pref #> [1] \"a\" #>  #> $suff #> [1] \"of b in c\" result$split[[2]] #> $pref #> [1] \"d\" #>  #> $suff #> [1] \"of e in f\" result$split[[3]] #> $pref #> [1] \"g\" #>  #> $suff #> [1] \"of h in i\""},{"path":"/articles/RCLabels.html","id":"nouns-and-prepositions","dir":"Articles","previous_headings":"","what":"Nouns and prepositions","title":"RCLabels","text":"discussed , prefix often “thing” interest, remainder label (suffix) modifies prefix. use case common introduce additional terms enable additional functionality. prefix usually noun (one words), suffix usually consists prepositional phrases (consisting preposition object). RCLabels includes list common prepositions.","code":"prepositions #> [1] \"in\"   \"into\" \"from\" \"of\"   \"->\"   \"to\""},{"path":"/articles/RCLabels.html","id":"working-with-row-and-column-labels-nouns-and-prepositions","dir":"Articles","previous_headings":"","what":"Working with row and column labels (nouns and prepositions)","title":"RCLabels","text":"RCLabels supports “nouns prepositions” view row column labels several functions. get_nouns() extracts nouns row column label. Labels can split component pieces.","code":"labels #> [1] \"a [of b in c]\" \"d [of e in f]\" \"g [of h in i]\"  # Extract the nouns. get_nouns(labels, notation = bracket_notation) #> noun noun noun  #>  \"a\"  \"d\"  \"g\"  # Extract the prepositional phrases. get_pps(labels, notation = bracket_notation) #>         pps         pps         pps  #> \"of b in c\" \"of e in f\" \"of h in i\"  # Extract the prepositions themselves. get_prepositions(labels, notation = bracket_notation) #> $prepositions #> [1] \"of\" \"in\" #>  #> $prepositions #> [1] \"of\" \"in\" #>  #> $prepositions #> [1] \"of\" \"in\"  # Extract the objects of the prepositions. # Objects are named by the preposition of their phrase. get_objects(labels, notation = bracket_notation) #> $objects #>  of  in  #> \"b\" \"c\"  #>  #> $objects #>  of  in  #> \"e\" \"f\"  #>  #> $objects #>  of  in  #> \"h\" \"i\"  # The get_piece() function is a convenience function # that extracts just what you want. get_piece(labels, piece = \"noun\", notation = bracket_notation) #> noun noun noun  #>  \"a\"  \"d\"  \"g\" get_piece(labels, piece = \"pref\") #> pref pref pref  #>  \"a\"  \"d\"  \"g\" get_piece(labels, piece = \"suff\") #>        suff        suff        suff  #> \"of b in c\" \"of e in f\" \"of h in i\" get_piece(labels, piece = \"of\") #> [[1]] #>  of  #> \"b\"  #>  #> [[2]] #>  of  #> \"e\"  #>  #> [[3]] #>  of  #> \"h\" get_piece(labels, piece = \"in\") #> [[1]] #>  in  #> \"c\"  #>  #> [[2]] #>  in  #> \"f\"  #>  #> [[3]] #>  in  #> \"i\" # An empty string is returned when the preposition is missing. get_piece(labels, piece = \"bogus\") #> [[1]] #> bogus  #>    \"\"  #>  #> [[2]] #> bogus  #>    \"\"  #>  #> [[3]] #> bogus  #>    \"\" labels #> [1] \"a [of b in c]\" \"d [of e in f]\" \"g [of h in i]\" # Split the labels into pieces, named by \"noun\" and prepositions. split_labels <- split_labels(labels,                               prepositions = prepositions,                               notation = bracket_notation) split_labels #> [[1]] #> noun   of   in  #>  \"a\"  \"b\"  \"c\"  #>  #> [[2]] #> noun   of   in  #>  \"d\"  \"e\"  \"f\"  #>  #> [[3]] #> noun   of   in  #>  \"g\"  \"h\"  \"i\"  # Recombine split labels. paste_pieces(split_labels, notation = bracket_notation) #> [1] \"a [of b in c]\" \"d [of e in f]\" \"g [of h in i]\"  # Recombine with a new notation. paste_pieces(split_labels, notation = paren_notation) #> [1] \"a (of b in c)\" \"d (of e in f)\" \"g (of h in i)\""},{"path":"/articles/RCLabels.html","id":"modifying-row-and-column-labels","dir":"Articles","previous_headings":"","what":"Modifying row and column labels","title":"RCLabels","text":"modify row column labels, use one modify_* functions. modify pieces labels, use modify_label_pieces() function. modify_label_pieces() enables assigning new values using “one--many” approach enables aggregation. eliminate piece label altogether, use remove_label_pieces() function. much power comes much responsibility!","code":"labels #> [1] \"a [of b in c]\" \"d [of e in f]\" \"g [of h in i]\"  # Set new values for nouns. modify_nouns(labels,               new_nouns = c(\"Coal\", \"Oil\", \"Natural gas\"),               notation = bracket_notation) #> [1] \"Coal [of b in c]\"        \"Oil [of e in f]\"         #> [3] \"Natural gas [of h in i]\" labels #> [1] \"a [of b in c]\" \"d [of e in f]\" \"g [of h in i]\"  # Change nouns in several labels to \"Production\" and \"Manufacture\", # as indicated by the modification map. modify_label_pieces(labels,                      piece = \"noun\",                      mod_map = list(Production = c(\"a\", \"b\", \"c\", \"d\"),                                    Manufacture = c(\"g\", \"h\", \"i\", \"j\")),                      notation = bracket_notation) #> [1] \"Production [of b in c]\"  \"Production [of e in f]\"  #> [3] \"Manufacture [of h in i]\"  # Change the objects of the \"in\" preposition,  # according to the modification map. modify_label_pieces(labels,                      piece = \"in\",                      mod_map = list(GHA = \"c\", ZAF = c(\"f\", \"i\")),                      notation = bracket_notation) #> [1] \"a [of b in GHA]\" \"d [of e in ZAF]\" \"g [of h in ZAF]\"  # Change the objects of \"of\" prepositions, # according to the modification map. modify_label_pieces(labels,                      piece = \"of\",                      mod_map = list(Coal = \"b\", `Crude oil` = c(\"e\", \"h\")),                      notation = bracket_notation) #> [1] \"a [of Coal in c]\"      \"d [of Crude oil in f]\" \"g [of Crude oil in i]\" labels #> [1] \"a [of b in c]\" \"d [of e in f]\" \"g [of h in i]\"  # Eliminate all of the prepositional phrases that begin with \"in\". remove_label_pieces(labels,                      piece = \"in\",                      notation = bracket_notation) #> [1] \"a [of b]\" \"d [of e]\" \"g [of h]\"  # Eliminate all of the prepositional phrases that begin with \"of\" and \"in\". # Note that some spaces remain. remove_label_pieces(labels,                      piece = c(\"of\", \"in\"),                      notation = bracket_notation) #> [1] \"a [ ]\" \"d [ ]\" \"g [ ]\""},{"path":"/articles/RCLabels.html","id":"detecting-strings-in-labels","dir":"Articles","previous_headings":"","what":"Detecting strings in labels","title":"RCLabels","text":"times helpful know string label. match_by_pattern() searches matches row column labels regular expression. Internally, match_by_pattern() uses grepl() regular expression matching.","code":"labels <- c(\"Production [of b in c]\", \"d [of Coal in f]\", \"g [of h in USA]\")  # With default `pieces` argument, matching is done for whole labels. match_by_pattern(labels, regex_pattern = \"Production\") #> [1]  TRUE FALSE FALSE match_by_pattern(labels, regex_pattern = \"Coal\") #> [1] FALSE  TRUE FALSE match_by_pattern(labels, regex_pattern = \"USA\") #> [1] FALSE FALSE  TRUE  # Check beginnings of labels: match! match_by_pattern(labels, regex_pattern = \"^Production\") #> [1]  TRUE FALSE FALSE # Check at ends of labels: no match! match_by_pattern(labels, regex_pattern = \"Production$\") #> [1] FALSE FALSE FALSE  # Search by prefix or suffix. match_by_pattern(labels, regex_pattern = \"Production\", pieces = \"pref\") #> [1]  TRUE FALSE FALSE match_by_pattern(labels, regex_pattern = \"Production\", pieces = \"suff\") #> [1] FALSE FALSE FALSE # When pieces is \"pref\" or \"suff\", only one can be specified. # The following function call gives an error. # match_by_pattern(labels, regex_pattern = \"Production\", pieces = c(\"pref\", \"to\"))  # Search by noun or preposition. match_by_pattern(labels, regex_pattern = \"Production\", pieces = \"noun\") #> [1]  TRUE FALSE FALSE match_by_pattern(labels, regex_pattern = \"Production\", pieces = \"in\") #> [1] FALSE FALSE FALSE # Searching can be done with complicated regex patterns. match_by_pattern(labels,                   regex_pattern = make_or_pattern(c(\"c\", \"f\")),                  pieces = \"in\") #> [1]  TRUE  TRUE FALSE match_by_pattern(labels,                  regex_pattern = make_or_pattern(c(\"b\", \"Coal\", \"USA\")),                  pieces = \"in\") #> [1] FALSE FALSE  TRUE match_by_pattern(labels,                  regex_pattern = make_or_pattern(c(\"b\", \"Coal\", \"USA\")),                  pieces = c(\"of\", \"in\")) #> [1] TRUE TRUE TRUE # Works with custom lists of prepositions. match_by_pattern(labels,                  regex_pattern = make_or_pattern(c(\"b\", \"Coal\", \"GBR\", \"USA\")),                  pieces = c(\"noun\", \"of\", \"in\", \"to\"),                  prepositions = c(\"of\", \"to\", \"in\")) #> [1] TRUE TRUE TRUE"},{"path":"/articles/RCLabels.html","id":"replacing-strings-in-labels","dir":"Articles","previous_headings":"","what":"Replacing strings in labels","title":"RCLabels","text":"times helpful replace strings labels. replace_by_pattern() function replace strings row column labels regular expression pattern. Note replace_by_pattern() similar match_by_pattern(), except replace_by_pattern() additional argument, replacement. Internally, replace_by_pattern() uses gsub() perform regular expression matching.","code":"labels <- c(\"Production [of b in c]\", \"d [of Coal in f]\", \"g [of h in USA]\") labels #> [1] \"Production [of b in c]\" \"d [of Coal in f]\"       \"g [of h in USA]\"  # If `pieces = \"all\"` (the default), the entire label is available for replacements. replace_by_pattern(labels,                    regex_pattern = \"Production\",                    replacement = \"Manufacture\") #> [1] \"Manufacture [of b in c]\" \"d [of Coal in f]\"        #> [3] \"g [of h in USA]\" replace_by_pattern(labels,                    regex_pattern = \"Coal\",                    replacement = \"Oil\") #> [1] \"Production [of b in c]\" \"d [of Oil in f]\"        \"g [of h in USA]\" replace_by_pattern(labels,                    regex_pattern = \"USA\",                    replacement = \"GHA\") #> [1] \"Production [of b in c]\" \"d [of Coal in f]\"       \"g [of h in GHA]\"  # Replace by prefix and suffix. replace_by_pattern(labels,                    regex_pattern = \"Production\",                    replacement = \"Manufacture\",                    pieces = \"pref\") #> [1] \"Manufacture [of b in c]\" \"d [of Coal in f]\"        #> [3] \"g [of h in USA]\" replace_by_pattern(labels,                    regex_pattern = \"Coa\",                    replacement = \"Bow\",                    pieces = \"suff\") #> [1] \"Production [of b in c]\" \"d [of Bowl in f]\"       \"g [of h in USA]\" # Nothing should change, because USA is in the suffix. replace_by_pattern(labels,                    regex_pattern = \"SA\",                    replacement = \"SSR\",                    pieces = \"pref\") #> [1] \"Production [of b in c]\" \"d [of Coal in f]\"       \"g [of h in USA]\" # Now USA --> USSR, because USA is in the suffix. replace_by_pattern(labels,                    regex_pattern = \"SA\",                    replacement = \"SSR\",                    pieces = \"suff\") #> [1] \"Production [of b in c]\" \"d [of Coal in f]\"       \"g [of h in USSR]\" # This will throw an error, because only \"pref\" or \"suff\" can be specified. # replace_by_pattern(labels, #                    regex_pattern = \"SA\", #                    replacement = \"SSR\", #                    pieces = c(\"pref\", \"suff\")  # Replace by noun or preposition. replace_by_pattern(labels,                    regex_pattern = \"Production\",                    replacement = \"Manufacture\",                    pieces = \"noun\") #> [1] \"Manufacture [of b in c]\" \"d [of Coal in f]\"        #> [3] \"g [of h in USA]\" replace_by_pattern(labels,                    regex_pattern = \"^Pro\",                    replacement = \"Con\",                    pieces = \"noun\") #> [1] \"Conduction [of b in c]\" \"d [of Coal in f]\"       \"g [of h in USA]\" # Won't match: wrong side of string. replace_by_pattern(labels,                    regex_pattern = \"Pro$\",                    replacement = \"Con\",                    pieces = \"noun\") #> [1] \"Production [of b in c]\" \"d [of Coal in f]\"       \"g [of h in USA]\" # No change, because \"Production\" is a noun. replace_by_pattern(labels,                    regex_pattern = \"Production\",                    replacement = \"Manufacture\",                    pieces = \"of\") #> [1] \"Production [of b in c]\" \"d [of Coal in f]\"       \"g [of h in USA]\" # Now try with \"of\". replace_by_pattern(labels,                    regex_pattern = \"Coal\",                    replacement = \"Oil\",                    pieces = \"of\") #> [1] \"Production [of b in c]\" \"d [of Oil in f]\"        \"g [of h in USA]\" # No change, because \"Coal\" is not \"in\" anything. replace_by_pattern(labels,                    regex_pattern = \"Coal\",                    replacement = \"Oil\",                    pieces = \"in\") #> [1] \"Production [of b in c]\" \"d [of Coal in f]\"       \"g [of h in USA]\" # Now try in \"in\". replace_by_pattern(labels,                    regex_pattern = \"USA\",                    replacement = \"GBR\",                    pieces = \"in\") #> [1] \"Production [of b in c]\" \"d [of Coal in f]\"       \"g [of h in GBR]\" replace_by_pattern(labels,                    regex_pattern = \"A$\",                    replacement = \"upercalifragilisticexpialidocious\",                    pieces = \"in\") #> [1] \"Production [of b in c]\"                          #> [2] \"d [of Coal in f]\"                                #> [3] \"g [of h in USupercalifragilisticexpialidocious]\""},{"path":"/articles/RCLabels.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"RCLabels","text":"RCLabels package streamlines manipulation row column labels matrices. Applications include input-output analysis economics energy conversion chain analysis anywhere row column labels important matrix mathematics.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Heun. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Matthew Kuperus Heun (2022). RCLabels: Tools munging manipulating row column labels matrices. R package version 0.1.1.","code":"@Manual{,   title = {RCLabels: Tools for munging and manipulating row and column labels on matrices},   author = {Matthew Kuperus Heun},   year = {2022},   note = {R package version 0.1.1},   url = {https://github.com/MatthewHeun/RCLabels}, }"},{"path":"/index.html","id":"rclabels","dir":"","previous_headings":"","what":"Manipulate Matrix Row and Column Labels with Ease","title":"Manipulate Matrix Row and Column Labels with Ease","text":"package provides functions assist manipulating matrix row column labels types matrix mathematics row column labels respected. Example applications include economic energy conversion chain analyses using input-output (IO) analysis physical supply-use table (PSUT) analysis.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Manipulate Matrix Row and Column Labels with Ease","text":"can install matsindf CRAN : can install development version RCLabels GitHub :","code":"install.packages(\"RCLabels\") # install.packages(\"devtools\") devtools::install_github(\"MatthewHeun/RCLabels\")"},{"path":"/index.html","id":"more-information","dir":"","previous_headings":"","what":"More Information","title":"Manipulate Matrix Row and Column Labels with Ease","text":"Find information, including vignettes function documentation, https://MatthewHeun.github.io/RCLabels/.","code":""},{"path":"/reference/arrow_notation.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrow notation — arrow_notation","title":"Arrow notation — arrow_notation","text":"description arrow notation.","code":""},{"path":"/reference/arrow_notation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrow notation — arrow_notation","text":"","code":"arrow_notation"},{"path":"/reference/arrow_notation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Arrow notation — arrow_notation","text":"vector notational symbols provides arrow separator (\"-> b\") prefix suffix.","code":""},{"path":"/reference/arrow_notation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrow notation — arrow_notation","text":"","code":"arrow_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"     \" -> \"     \" -> \"         \"\""},{"path":"/reference/bracket_arrow_notation.html","id":null,"dir":"Reference","previous_headings":"","what":"Bracket arrow notation — bracket_arrow_notation","title":"Bracket arrow notation — bracket_arrow_notation","text":"description bracket arrow notation.","code":""},{"path":"/reference/bracket_arrow_notation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bracket arrow notation — bracket_arrow_notation","text":"","code":"bracket_arrow_notation"},{"path":"/reference/bracket_arrow_notation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bracket arrow notation — bracket_arrow_notation","text":"vector notational symbols provides bracket arrow (\"[-> b]\") notation.","code":""},{"path":"/reference/bracket_arrow_notation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bracket arrow notation — bracket_arrow_notation","text":"","code":"bracket_arrow_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"    \" [-> \"    \" [-> \"        \"]\""},{"path":"/reference/bracket_notation.html","id":null,"dir":"Reference","previous_headings":"","what":"Bracket notation — bracket_notation","title":"Bracket notation — bracket_notation","text":"description bracket notation.","code":""},{"path":"/reference/bracket_notation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bracket notation — bracket_notation","text":"","code":"bracket_notation"},{"path":"/reference/bracket_notation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bracket notation — bracket_notation","text":"vector notational symbols provides bracket (\"[b]\") notation.","code":""},{"path":"/reference/bracket_notation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bracket notation — bracket_notation","text":"","code":"bracket_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"       \" [\"       \" [\"        \"]\""},{"path":"/reference/first_dot_notation.html","id":null,"dir":"Reference","previous_headings":"","what":"First dot notation — first_dot_notation","title":"First dot notation — first_dot_notation","text":"description first dot notation. Note \".b.c\" splits prefix (\"\") suffix (\"b.c\").","code":""},{"path":"/reference/first_dot_notation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First dot notation — first_dot_notation","text":"","code":"first_dot_notation"},{"path":"/reference/first_dot_notation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"First dot notation — first_dot_notation","text":"vector notational symbols provides first dot (\".b\") notation.","code":""},{"path":"/reference/first_dot_notation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"First dot notation — first_dot_notation","text":"","code":"first_dot_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"        \".\"        \".\"         \"\""},{"path":"/reference/from_notation.html","id":null,"dir":"Reference","previous_headings":"","what":"From notation — from_notation","title":"From notation — from_notation","text":"description notation.","code":""},{"path":"/reference/from_notation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From notation — from_notation","text":"","code":"from_notation"},{"path":"/reference/from_notation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"From notation — from_notation","text":"vector notational symbols provides (\"[b]\") notation.","code":""},{"path":"/reference/from_notation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"From notation — from_notation","text":"","code":"from_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"  \" [from \"  \" [from \"        \"]\""},{"path":"/reference/get_nouns.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract nouns from labels — get_nouns","title":"Extract nouns from labels — get_nouns","text":"Nouns first part row-column label, \"\" \"[b]\". Internally, function calls get_pref_suff() asks prefix.","code":""},{"path":"/reference/get_nouns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract nouns from labels — get_nouns","text":"","code":"get_nouns(labels, notation = RCLabels::bracket_notation)"},{"path":"/reference/get_nouns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract nouns from labels — get_nouns","text":"labels list vector labels nouns extracted. notation notation type used extracting nouns. Default RCLabels::bracket_notation.","code":""},{"path":"/reference/get_nouns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract nouns from labels — get_nouns","text":"list nouns row column labels.","code":""},{"path":"/reference/get_nouns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract nouns from labels — get_nouns","text":"","code":"get_nouns(\"a [b]\", bracket_notation) #> noun  #>  \"a\"  # Also works with vectors and lists. get_nouns(c(\"a [b]\", \"c [d]\")) #> noun noun  #>  \"a\"  \"c\"  get_nouns(list(\"a [b]\", \"c [d]\")) #> noun noun  #>  \"a\"  \"c\""},{"path":"/reference/get_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract objects of prepositional phrases in row and column labels — get_objects","title":"Extract objects of prepositional phrases in row and column labels — get_objects","text":"function extracts objects prepositional phrases row column labels. format output list named items, one name preposition encountered labels. Objects NA prepositional phrase starting preposition.","code":""},{"path":"/reference/get_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract objects of prepositional phrases in row and column labels — get_objects","text":"","code":"get_objects(   labels,   notation = RCLabels::bracket_notation,   prepositions = RCLabels::prepositions )"},{"path":"/reference/get_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract objects of prepositional phrases in row and column labels — get_objects","text":"labels row column labels prepositional phrases extracted. notation notation object describes labels. Default RCLabels::bracket_notation. prepositions vector strings treated prepositions. Note space appended word internally, , e.g., \"\" becomes \"\". Default RCLabels::prepositions.","code":""},{"path":"/reference/get_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract objects of prepositional phrases in row and column labels — get_objects","text":"list objects prepositional phrases, names prepositions, values objects.","code":""},{"path":"/reference/get_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract objects of prepositional phrases in row and column labels — get_objects","text":"","code":"get_objects(c(\"a [of b into c]\", \"d [of Coal from e -> f]\")) #> $objects #>   of into  #>  \"b\"  \"c\"  #>  #> $objects #>     of   from     ->  #> \"Coal\"    \"e\"    \"f\"  #>"},{"path":"/reference/get_piece.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a piece of a label — get_piece","title":"Get a piece of a label — get_piece","text":"wrapper function get_pref_suff(), get_nouns(), get_objects(). returns piece row column label.","code":""},{"path":"/reference/get_piece.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a piece of a label — get_piece","text":"","code":"get_piece(   labels,   piece = \"all\",   notation = RCLabels::bracket_notation,   prepositions = RCLabels::prepositions )"},{"path":"/reference/get_piece.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a piece of a label — get_piece","text":"labels row column labels prepositional phrases extracted. piece name item return. notation notation object describes labels. Default RCLabels::bracket_notation. prepositions vector strings treated prepositions. Note space appended word internally, , e.g., \"\" becomes \"\". Default RCLabels::prepositions.","code":""},{"path":"/reference/get_piece.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a piece of a label — get_piece","text":"piece labels.","code":""},{"path":"/reference/get_piece.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a piece of a label — get_piece","text":"piece typically one \"\" (returns labels directly), \"pref\" (prefixes), \"suff\" (suffixes), \"noun\" (returns noun), \"pps\" (prepositional phrases, returns prepositional phrases full), \"prepositions\" (returns list prepositions), \"objects\" (returns list objects prepositions names), preposition prepositions (string), return object preposition named preposition . piece must character vector length 1. piece missing label, \"\" (empty string) returned.","code":""},{"path":"/reference/get_piece.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a piece of a label — get_piece","text":"","code":"labs <- c(\"a [from b in c]\", \"d [of e in f]\", \"Export [of Coal from USA to MEX]\") get_piece(labs, \"pref\") #>     pref     pref     pref  #>      \"a\"      \"d\" \"Export\"  get_piece(labs, \"suff\") #>                      suff                      suff                      suff  #>             \"from b in c\"               \"of e in f\" \"of Coal from USA to MEX\"  get_piece(labs, piece = \"noun\") #>     noun     noun     noun  #>      \"a\"      \"d\" \"Export\"  get_piece(labs, piece = \"pps\") #>                       pps                       pps                       pps  #>             \"from b in c\"               \"of e in f\" \"of Coal from USA to MEX\"  get_piece(labs, piece = \"prepositions\") #> $prepositions #> [1] \"from\" \"in\"   #>  #> $prepositions #> [1] \"of\" \"in\" #>  #> $prepositions #> [1] \"of\"   \"from\" \"to\"   #>  get_piece(labs, piece = \"objects\") #> $objects #> from   in  #>  \"b\"  \"c\"  #>  #> $objects #>  of  in  #> \"e\" \"f\"  #>  #> $objects #>     of   from     to  #> \"Coal\"  \"USA\"  \"MEX\"  #>  get_piece(labs, piece = \"from\") #> [[1]] #> from  #>  \"b\"  #>  #> [[2]] #> from  #>   \"\"  #>  #> [[3]] #>  from  #> \"USA\"  #>  get_piece(labs, piece = \"in\") #> [[1]] #>  in  #> \"c\"  #>  #> [[2]] #>  in  #> \"f\"  #>  #> [[3]] #> in  #> \"\"  #>  get_piece(labs, piece = \"of\") #> [[1]] #> of  #> \"\"  #>  #> [[2]] #>  of  #> \"e\"  #>  #> [[3]] #>     of  #> \"Coal\"  #>  get_piece(labs, piece = \"to\") #> [[1]] #> to  #> \"\"  #>  #> [[2]] #> to  #> \"\"  #>  #> [[3]] #>    to  #> \"MEX\"  #>"},{"path":"/reference/get_pps.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract prepositional phrases of row and column labels — get_pps","title":"Extract prepositional phrases of row and column labels — get_pps","text":"function extracts prepositional phrases suffixes row column labels.","code":""},{"path":"/reference/get_pps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract prepositional phrases of row and column labels — get_pps","text":"","code":"get_pps(   labels,   notation = RCLabels::bracket_notation,   prepositions = RCLabels::prepositions )"},{"path":"/reference/get_pps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract prepositional phrases of row and column labels — get_pps","text":"labels list vector labels nouns extracted. notation notation type used extracting nouns. Default RCLabels::bracket_notation. prepositions list prepositions, used detect prepositional phrases. Default RCLabels::prepositions.","code":""},{"path":"/reference/get_pps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract prepositional phrases of row and column labels — get_pps","text":"prepositional phrases suffix.","code":""},{"path":"/reference/get_pps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract prepositional phrases of row and column labels — get_pps","text":"","code":"get_pps(c(\"a [in b]\", \"c [of d]\")) #>    pps    pps  #> \"in b\" \"of d\"  get_pps(c(\"a [of b in c]\", \"d [-> e of f]\")) #>         pps         pps  #> \"of b in c\" \"-> e of f\""},{"path":"/reference/get_prepositions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract prepositions from row and column labels — get_prepositions","title":"Extract prepositions from row and column labels — get_prepositions","text":"function extracts prepositions list row column labels. list outer structure number labels inner structure prepositional phrase specific label.","code":""},{"path":"/reference/get_prepositions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract prepositions from row and column labels — get_prepositions","text":"","code":"get_prepositions(   labels,   notation = RCLabels::bracket_notation,   prepositions = RCLabels::prepositions )"},{"path":"/reference/get_prepositions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract prepositions from row and column labels — get_prepositions","text":"labels row column labels prepositional phrases extracted. notation notation object describes labels. Default RCLabels::bracket_notation. prepositions vector strings treated prepositions. Note space appended word internally, , e.g., \"\" becomes \"\". Default RCLabels::prepositions.","code":""},{"path":"/reference/get_prepositions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract prepositions from row and column labels — get_prepositions","text":"list prepositions.","code":""},{"path":"/reference/get_prepositions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract prepositions from row and column labels — get_prepositions","text":"","code":"get_prepositions(c(\"a [of b into c]\", \"d [-> e of f]\")) #> $prepositions #> [1] \"of\"   \"into\" #>  #> $prepositions #> [1] \"->\" \"of\" #>"},{"path":"/reference/make_or_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ","title":"Create ","text":"function makes \"\" regex patterns vectors lists strings. function can used matsbyname::select_rows_byname() matsbyname::select_cols_byname functions. make_or_pattern() correctly escapes special characters strings, ( ), needed. Thus, highly recommended make_or_pattern used constructing patterns row column selections matsbyname::select_rows_byname() matsbyname::select_cols_byname().","code":""},{"path":"/reference/make_or_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ","text":"","code":"make_or_pattern(   strings,   pattern_type = c(\"exact\", \"leading\", \"trailing\", \"anywhere\", \"literal\") )"},{"path":"/reference/make_or_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ","text":"strings vector row column names. pattern_type One \"exact\", \"leading\", \"trailing\", \"anywhere\", \"literal\". Default \"exact\".","code":""},{"path":"/reference/make_or_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ","text":"\"\" regex pattern suitable selecting row column names. Amenable use matsbyname::select_rows_byname matsbyname::select_cols_byname.","code":""},{"path":"/reference/make_or_pattern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create ","text":"pattern_type controls type pattern created: exact produces regex pattern selects row column names exact match. leading produces regex pattern selects row column names item strings matches beginnings row column names. trailing produces regex pattern selects row column names item strings matches ends row column names. anywhere produces regex pattern selects row column names item strings matches substring row column names. literal returns strings unmodified, caller formulate correct regex.","code":""},{"path":"/reference/make_or_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ","text":"","code":"make_or_pattern(strings = c(\"a\", \"b\"), pattern_type = \"exact\") #> [1] \"^a$|^b$\""},{"path":"/reference/match_by_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Tell whether row or column labels match a regular expression — match_by_pattern","title":"Tell whether row or column labels match a regular expression — match_by_pattern","text":"function tells whether row column labels match regular expression. Internally, grepl() decides whether match occurs.","code":""},{"path":"/reference/match_by_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tell whether row or column labels match a regular expression — match_by_pattern","text":"","code":"match_by_pattern(   labels,   regex_pattern,   pieces = \"all\",   prepositions = RCLabels::prepositions,   notation = RCLabels::bracket_notation,   ... )"},{"path":"/reference/match_by_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tell whether row or column labels match a regular expression — match_by_pattern","text":"labels row column labels pieces modified. regex_pattern regular expression pattern determine matches. Consider using Hmisc::escapeRegex() escape regex_pattern calling function. pieces pieces row column labels checked matches. See details. prepositions vector strings count prepositions. Default RCLabels::prepositions. Used detect prepositional phrases pieces interpreted prepositions. notation notation used labels. Default RCLabels::bracket_notation. ... arguments passed grepl(), ignore.case, perl, fixed, useBytes. See examples.","code":""},{"path":"/reference/match_by_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tell whether row or column labels match a regular expression — match_by_pattern","text":"logical vector length labels, TRUE indicates match found FALSE indicates otherwise.","code":""},{"path":"/reference/match_by_pattern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tell whether row or column labels match a regular expression — match_by_pattern","text":"default (pieces = \"\"), complete labels (strings) checked matches. pieces == \"pref\" pieces == \"suff\", prefix suffix checked matches. Alternatively, pieces = \"noun\" pieces = <<preposition>> indicate specific pieces labels checked matches. pieces = <<preposition>>, object <<preposition>> checked matches. pieces can vector, indicating multiple pieces checked matches. pieces \"\", pieces checked. pieces \"pref\" \"suff\", one can specified.","code":""},{"path":"/reference/match_by_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tell whether row or column labels match a regular expression — match_by_pattern","text":"","code":"labels <- c(\"Production [of b in c]\", \"d [of Coal in f]\", \"g [of h in USA]\") # With default `pieces` argument, matching is done for whole labels. match_by_pattern(labels, regex_pattern = \"Production\") #> [1]  TRUE FALSE FALSE match_by_pattern(labels, regex_pattern = \"Coal\") #> [1] FALSE  TRUE FALSE match_by_pattern(labels, regex_pattern = \"USA\") #> [1] FALSE FALSE  TRUE # Check beginnings of labels match_by_pattern(labels, regex_pattern = \"^Production\") #> [1]  TRUE FALSE FALSE # Check at ends of labels: no match. match_by_pattern(labels, regex_pattern = \"Production$\") #> [1] FALSE FALSE FALSE # Can match on nouns or prepositions. match_by_pattern(labels, regex_pattern = \"Production\", pieces = \"noun\") #> [1]  TRUE FALSE FALSE # Gives FALSE, because \"Production\" is a noun. match_by_pattern(labels, regex_pattern = \"Production\", pieces = \"in\") #> [1] FALSE FALSE FALSE"},{"path":"/reference/modify_label_pieces.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify pieces of row and column labels — modify_label_pieces","title":"Modify pieces of row and column labels — modify_label_pieces","text":"function modifies pieces row column labels according label_map defines \"one many one\" relationships. function useful aggregations. example, replacing nouns can done modify_label_pieces(<<labels>>, piece = \"noun\", label_map = list(new_noun = c(\"\", \"b\", \"c\")). string \"new_noun\" replace \"\", \"b\", \"c\" appear nouns row column label. See examples details.","code":""},{"path":"/reference/modify_label_pieces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify pieces of row and column labels — modify_label_pieces","text":"","code":"modify_label_pieces(   labels,   piece,   mod_map,   prepositions = RCLabels::prepositions,   notation = RCLabels::bracket_notation )"},{"path":"/reference/modify_label_pieces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify pieces of row and column labels — modify_label_pieces","text":"labels row column labels pieces modified. piece piece (pieces) row column label modified. mod_map modification map. See details. prepositions list prepositions, used detect prepositional phrases. Default RCLabels::prepositions. notation notation used labels. Default RCLabels::bracket_notation.","code":""},{"path":"/reference/modify_label_pieces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify pieces of row and column labels — modify_label_pieces","text":"labels replacements according piece mod_map.","code":""},{"path":"/reference/modify_label_pieces.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify pieces of row and column labels — modify_label_pieces","text":"Typical pieces include \"noun\" preposition, \"\" \"\". See RCLabels::prepositions additional examples. argument may single string character vector. mod_map argument consist named list character vectors names indicate strings inserted values indicate values replaced. sense new = old new = olds, \"new\" new name (replacement) \"old\" \"olds\" /string/vector strings, one replaced \"new\".","code":""},{"path":"/reference/modify_label_pieces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify pieces of row and column labels — modify_label_pieces","text":"","code":"# Simple case modify_label_pieces(\"a [of b in c]\",                     piece = \"noun\",                     mod_map = list(new_noun = c(\"a\", \"b\"))) #> [1] \"new_noun [of b in c]\" # Works with a vector or list of labels modify_label_pieces(c(\"a [of b in c]\", \"d [-> e in f]\"),                     piece = \"noun\",                     mod_map = list(new_noun = c(\"d\", \"e\"))) #> [1] \"a [of b in c]\"        \"new_noun [-> e in f]\" # Works with multiple items in the mod_map modify_label_pieces(c(\"a [of b in c]\", \"d [-> e in f]\"),                     piece = \"noun\",                     mod_map = list(new_noun1 = c(\"a\", \"b\", \"c\"),                                    new_noun2 = c(\"d\", \"e\", \"f\"))) #> [1] \"new_noun1 [of b in c]\" \"new_noun2 [-> e in f]\" # Works with multiple pieces to be modified modify_label_pieces(c(\"a [of b in c]\", \"d [-> e in f]\"),                     piece = c(\"noun\", \"in\"),                     mod_map = list(new_noun = c(\"a\", \"b\", \"c\"),                                    new_in   = c(\"c\", \"f\"))) #> [1] \"new_noun [of b in new_in]\" \"d [-> e in new_in]\""},{"path":"/reference/modify_nouns.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify nouns in labels — modify_nouns","title":"Modify nouns in labels — modify_nouns","text":"function modifies nouns row column labels. length new_nouns must length labels.","code":""},{"path":"/reference/modify_nouns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify nouns in labels — modify_nouns","text":"","code":"modify_nouns(labels, new_nouns, notation = RCLabels::bracket_notation)"},{"path":"/reference/modify_nouns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify nouns in labels — modify_nouns","text":"labels row column labels nouns modified. new_nouns new nouns set labels. Must length labels. notation notation used labels. Default RCLabels::bracket_notation.","code":""},{"path":"/reference/modify_nouns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify nouns in labels — modify_nouns","text":"character vector length labels nouns modified new_nouns.","code":""},{"path":"/reference/modify_nouns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify nouns in labels — modify_nouns","text":"","code":"labels <- c(\"a [of b in c]\", \"d [of e in USA]\") modify_nouns(labels, c(\"a_plus\", \"g\")) #> [1] \"a_plus [of b in c]\" \"g [of e in USA]\""},{"path":"/reference/of_notation.html","id":null,"dir":"Reference","previous_headings":"","what":"Of notation — of_notation","title":"Of notation — of_notation","text":"description notation.","code":""},{"path":"/reference/of_notation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Of notation — of_notation","text":"","code":"of_notation"},{"path":"/reference/of_notation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Of notation — of_notation","text":"vector notational symbols provides (\"[b]\") notation.","code":""},{"path":"/reference/of_notation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Of notation — of_notation","text":"","code":"of_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"    \" [of \"    \" [of \"        \"]\""},{"path":"/reference/paren_notation.html","id":null,"dir":"Reference","previous_headings":"","what":"Parenthetical notation — paren_notation","title":"Parenthetical notation — paren_notation","text":"description parenthetical notation.","code":""},{"path":"/reference/paren_notation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parenthetical notation — paren_notation","text":"","code":"paren_notation"},{"path":"/reference/paren_notation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parenthetical notation — paren_notation","text":"vector notational symbols provides parenthetical (\"(b)\") notation.","code":""},{"path":"/reference/paren_notation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parenthetical notation — paren_notation","text":"","code":"paren_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"       \" (\"       \" (\"        \")\""},{"path":"/reference/paste_pieces.html","id":null,"dir":"Reference","previous_headings":"","what":"Recombine row and column labels — paste_pieces","title":"Recombine row and column labels — paste_pieces","text":"function recombines (unsplits) row column labels separated split_labels().","code":""},{"path":"/reference/paste_pieces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recombine row and column labels — paste_pieces","text":"","code":"paste_pieces(splt_labels, notation = RCLabels::bracket_notation)"},{"path":"/reference/paste_pieces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recombine row and column labels — paste_pieces","text":"splt_labels vector split row column labels, probably created split_labels(). notation notation object describes labels. Default RCLabels::bracket_notation.","code":""},{"path":"/reference/paste_pieces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recombine row and column labels — paste_pieces","text":"Recombined row column labels.","code":""},{"path":"/reference/paste_pieces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recombine row and column labels — paste_pieces","text":"","code":"labs <- c(\"a [of b in c]\", \"d [from Coal mines in USA]\") labs #> [1] \"a [of b in c]\"              \"d [from Coal mines in USA]\" split <- split_labels(labs) split #> [[1]] #> noun   of   in  #>  \"a\"  \"b\"  \"c\"  #>  #> [[2]] #>         noun         from           in  #>          \"d\" \"Coal mines\"        \"USA\"  #>  paste_pieces(split) #> [1] \"a [of b in c]\"              \"d [from Coal mines in USA]\" # Also works in a data frame df <- tibble::tibble(labels = c(\"a [in b]\", \"c [of d into USA]\",                                 \"e [of f in g]\", \"h [-> i in j]\")) recombined <- df %>%   dplyr::mutate(     splits = split_labels(labels),     recombined = paste_pieces(splits)   ) all(recombined$labels == recombined$recombined) #> [1] TRUE"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/prepositions.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepositions — prepositions","title":"Prepositions — prepositions","text":"Prepositions used row column labels.","code":""},{"path":"/reference/prepositions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepositions — prepositions","text":"","code":"prepositions"},{"path":"/reference/prepositions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Prepositions — prepositions","text":"vector prepositions used row column labels.","code":""},{"path":"/reference/prepositions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepositions — prepositions","text":"","code":"prepositions #> [1] \"in\"   \"into\" \"from\" \"of\"   \"->\"   \"to\""},{"path":"/reference/recombine_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Recombine row and column labels — recombine_labels","title":"Recombine row and column labels — recombine_labels","text":"function recombines (unsplits) row column labels separated split_labels().","code":""},{"path":"/reference/recombine_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recombine row and column labels — recombine_labels","text":"","code":"recombine_labels(ls, notation = RCLabels::bracket_notation)"},{"path":"/reference/recombine_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recombine row and column labels — recombine_labels","text":"ls vector split row column labels, probably created split_labels(). notation notation object describes labels. Default RCLabels::bracket_notation.","code":""},{"path":"/reference/recombine_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recombine row and column labels — recombine_labels","text":"Recombined row column labels.","code":""},{"path":"/reference/recombine_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recombine row and column labels — recombine_labels","text":"","code":"labs <- c(\"a [of b in c]\", \"d [from Coal mines in USA]\") labs #> [1] \"a [of b in c]\"              \"d [from Coal mines in USA]\" split <- split_labels(labs) split #> [[1]] #> noun   of   in  #>  \"a\"  \"b\"  \"c\"  #>  #> [[2]] #>         noun         from           in  #>          \"d\" \"Coal mines\"        \"USA\"  #>  recombine_labels(split) #> [1] \"a [of b in c]\"              \"d [from Coal mines in USA]\" # Also works in a data frame df <- tibble::tibble(labels = c(\"a [in b]\", \"c [of d into USA]\",                                 \"e [of f in g]\", \"h [-> i in j]\")) recombined <- df |>   dplyr::mutate(     splits = split_labels(labels),     recombined = recombine_labels(splits)   ) all(recombined$labels == recombined$recombined) #> [1] TRUE"},{"path":"/reference/regex_funcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find or replace row or column labels that match a regular expression — regex_funcs","title":"Find or replace row or column labels that match a regular expression — regex_funcs","text":"match_by_pattern() tells whether row column labels match regular expression. Internally, grepl() decides whether match occurs. replace_by_pattern() replaces portions row column labels regular expression matched. Internally, gsub() performs replacements.","code":""},{"path":"/reference/regex_funcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find or replace row or column labels that match a regular expression — regex_funcs","text":"","code":"match_by_pattern(   labels,   regex_pattern,   pieces = \"all\",   prepositions = RCLabels::prepositions,   notation = RCLabels::bracket_notation,   ... )  replace_by_pattern(   labels,   regex_pattern,   replacement,   pieces = \"all\",   prepositions = RCLabels::prepositions,   notation = RCLabels::bracket_notation,   ... )"},{"path":"/reference/regex_funcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find or replace row or column labels that match a regular expression — regex_funcs","text":"labels row column labels modified. regex_pattern regular expression pattern determine matches replacements. Consider using Hmisc::escapeRegex() escape regex_pattern calling function. pieces pieces row column labels checked matches replacements. See details. prepositions vector strings count prepositions. Default RCLabels::prepositions. Used detect prepositional phrases pieces interpreted prepositions. notation notation used labels. Default RCLabels::bracket_notation. ... arguments passed grepl() gsub(), ignore.case, perl, fixed, useBytes. See examples. replacement replace_by_pattern(), string replaces matches regex_pattern.","code":""},{"path":"/reference/regex_funcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find or replace row or column labels that match a regular expression — regex_funcs","text":"logical vector length labels, TRUE indicates match found FALSE indicates otherwise.","code":""},{"path":"/reference/regex_funcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find or replace row or column labels that match a regular expression — regex_funcs","text":"default (pieces = \"\"), complete labels (strings) checked matches replacements. pieces == \"pref\" pieces == \"suff\", prefix suffix checked matches replacements. Alternatively, pieces = \"noun\" pieces = <<preposition>> indicate specific pieces labels checked matches replacements. pieces = <<preposition>>, object <<preposition>> checked matches replacement. pieces can vector, indicating multiple pieces checked matches replacements. pieces \"\", pieces checked replaced. pieces \"pref\" \"suff\", one can specified.","code":""},{"path":"/reference/regex_funcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find or replace row or column labels that match a regular expression — regex_funcs","text":"","code":"labels <- c(\"Production [of b in c]\", \"d [of Coal in f]\", \"g [of h in USA]\") # With default `pieces` argument, matching is done for whole labels. match_by_pattern(labels, regex_pattern = \"Production\") #> [1]  TRUE FALSE FALSE match_by_pattern(labels, regex_pattern = \"Coal\") #> [1] FALSE  TRUE FALSE match_by_pattern(labels, regex_pattern = \"USA\") #> [1] FALSE FALSE  TRUE # Check beginnings of labels match_by_pattern(labels, regex_pattern = \"^Production\") #> [1]  TRUE FALSE FALSE # Check at ends of labels: no match. match_by_pattern(labels, regex_pattern = \"Production$\") #> [1] FALSE FALSE FALSE # Can match on nouns or prepositions. match_by_pattern(labels, regex_pattern = \"Production\", pieces = \"noun\") #> [1]  TRUE FALSE FALSE # Gives FALSE, because \"Production\" is a noun. match_by_pattern(labels, regex_pattern = \"Production\", pieces = \"in\") #> [1] FALSE FALSE FALSE"},{"path":"/reference/remove_label_pieces.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a prepositional phrase in a row or column label — remove_label_pieces","title":"Remove a prepositional phrase in a row or column label — remove_label_pieces","text":"function removes pieces row column labels.","code":""},{"path":"/reference/remove_label_pieces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a prepositional phrase in a row or column label — remove_label_pieces","text":"","code":"remove_label_pieces(   labels,   pieces_to_remove,   prepositions = RCLabels::prepositions,   notation = RCLabels::bracket_notation )"},{"path":"/reference/remove_label_pieces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a prepositional phrase in a row or column label — remove_label_pieces","text":"labels row column labels prepositional phrases removed. pieces_to_remove names pieces label removed, typically \"noun\" preposition \"\" \"\" See RCLabels::prepositions list known prepositions. prepositions list prepositions, used detect prepositional phrases. Default RCLabels::prepositions. notation notation used labels. Default RCLabels::bracket_notation.","code":""},{"path":"/reference/remove_label_pieces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a prepositional phrase in a row or column label — remove_label_pieces","text":"labels pieces removed.","code":""},{"path":"/reference/remove_label_pieces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a prepositional phrase in a row or column label — remove_label_pieces","text":"","code":"labs <- c(\"a [of b in c]\", \"d [-> e in f]\") remove_label_pieces(labs, pieces_to_remove = \"of\") #> [1] \"a [in c]\"      \"d [-> e in f]\" remove_label_pieces(labs, pieces_to_remove = c(\"of\", \"->\")) #> [1] \"a [in c]\" \"d [in f]\" remove_label_pieces(labs, pieces_to_remove = c(\"in\", \"into\")) #> [1] \"a [of b]\" \"d [-> e]\" remove_label_pieces(labs, pieces_to_remove = c(\"of\", \"in\")) #> [1] \"a [ ]\"    \"d [-> e]\""},{"path":"/reference/row-col-notation.html","id":null,"dir":"Reference","previous_headings":"","what":"Row and column notation — row-col-notation","title":"Row and column notation — row-col-notation","text":"often convenient represent row column names notation includes prefix suffix, corresponding separators start-end string sequences. several functions call notation_vec() generate specialized versions otherwise manipulate row column names row column names. notation_vec() Builds vector notation symbols standard format used matsbyname several places. default, builds list notation symbols provides arrow separator (\" -> \") prefix suffix. preposition_notation() Builds list notation symbols provides (default) square brackets around suffix preposition (\"prefix [preposition suffix]\"). paste_pref_suff() paste0's prefixes suffixes, inverse split_pref_suff(). flip_pref_suff() Switches location prefix suffix, prefix becomes suffix, suffix becomes prefix. E.g., \"-> b\" becomes \"b -> \" \"[b]\" becomes \"b []\". get_pref_suff() Selects prefix suffix, discarding notational elements rejected part. Internally, calls split_pref_suff() selects suff portions. switch_notation() Switches one type notation another based arguments. Optionally, prefix suffix can flipped. split_pref_suff() Splits prefixes suffixes, returning list names pref suff. prefix suffix delimiters found, x returned pref item, unmodified, suff item returned \"\" (empty string). prefix, empty string returned pref item. suffix, empty string returned suff item. sep specified (default \" -> \"), pref_start, pref_end, suff_start, suff_end set appropriately. None strings notation vector considered part prefix suffix. E.g., \"-> b\" arrow notation means \"\" prefix \"b\" suffix.","code":""},{"path":"/reference/row-col-notation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row and column notation — row-col-notation","text":"","code":"notation_vec(   sep = \" -> \",   pref_start = \"\",   pref_end = \"\",   suff_start = \"\",   suff_end = \"\" )  preposition_notation(preposition, suff_start = \" [\", suff_end = \"]\")  split_pref_suff(x, notation = RCLabels::arrow_notation, transpose = FALSE)  paste_pref_suff(   ps = list(pref = pref, suff = suff),   pref = NULL,   suff = NULL,   notation = RCLabels::arrow_notation )  flip_pref_suff(x, notation = RCLabels::arrow_notation)  get_pref_suff(   x,   which = c(\"pref\", \"suff\"),   notation = RCLabels::arrow_notation )  switch_notation(x, from, to, flip = FALSE)"},{"path":"/reference/row-col-notation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row and column notation — row-col-notation","text":"sep string separator prefix suffix. Default \" -> \". pref_start string indicating start prefix. Default NULL. pref_end string indicating end prefix. Default value sep. suff_start string indicating start suffix. Default value sep. suff_end string indicating end suffix. Default NULL. preposition string used indicate position energy flows, typically \"\" \"\" different notations. x string vector strings operated upon. notation notation vector generated one *_notation() functions, notation_vec(), arrow_notation, bracket_notation. Default arrow_notation. transpose boolean tells whether purr::transpose() result. Set transpose = TRUE using split_pref_suff() dplyr::mutate() call context data frame. Default FALSE. ps list prefixes suffixes item list list two items named pref suff. pref string list strings prefixes. Default NULL. suff string list strings suffixes. Default NULL. Tells keep, prefix (\"pref\") suffix (\"suff\"). notation switch away . notation switch . flip boolean tells whether also flip notation. Default FALSE.","code":""},{"path":"/reference/row-col-notation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row and column notation — row-col-notation","text":"notation_vec(), arrow_notation, bracket_notation, string vector named items pref_start, pref_end, suff_start, suff_end; split_pref_suff(), string list named items pref suff. paste_pref_suff(), split_pref_suff(), switch_notation(), string list notation format specified various notation arguments, including , . keep_pref_suff, one prefix suffix list prefixes suffixes.","code":""},{"path":"/reference/row-col-notation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row and column notation — row-col-notation","text":"","code":"notation_vec() #> pref_start   pref_end suff_start   suff_end  #>         \"\"     \" -> \"     \" -> \"         \"\"  arrow_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"     \" -> \"     \" -> \"         \"\"  bracket_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"       \" [\"       \" [\"        \"]\"  split_pref_suff(\"a -> b\", notation = arrow_notation) #> $pref #> [1] \"a\" #>  #> $suff #> [1] \"b\" #>  split_pref_suff(c(\"a -> b\", \"c -> d\", \"e -> f\"), notation = arrow_notation) #> $pref #> [1] \"a\" \"c\" \"e\" #>  #> $suff #> [1] \"b\" \"d\" \"f\" #>  split_pref_suff(c(\"a -> b\", \"c -> d\", \"e -> f\"), notation = arrow_notation,                 transpose = TRUE) #> [[1]] #> [[1]]$pref #> [1] \"a\" #>  #> [[1]]$suff #> [1] \"b\" #>  #>  #> [[2]] #> [[2]]$pref #> [1] \"c\" #>  #> [[2]]$suff #> [1] \"d\" #>  #>  #> [[3]] #> [[3]]$pref #> [1] \"e\" #>  #> [[3]]$suff #> [1] \"f\" #>  #>  flip_pref_suff(\"a [b]\", notation = bracket_notation) #> [1] \"b [a]\" get_pref_suff(\"a -> b\", which = \"suff\", notation = arrow_notation) #> suff  #>  \"b\"  switch_notation(\"a -> b\", from = arrow_notation, to = bracket_notation) #> [1] \"a [b]\" switch_notation(\"a -> b\", from = arrow_notation, to = bracket_notation,                 flip = TRUE) #> [1] \"b [a]\" # Also works for vectors switch_notation(c(\"a -> b\", \"c -> d\"), from = arrow_notation, to = bracket_notation) #> [[1]] #> [1] \"a [b]\" #>  #> [[2]] #> [1] \"c [d]\" #>"},{"path":"/reference/split_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Split row and column labels into nouns and prepositional phrases — split_labels","title":"Split row and column labels into nouns and prepositional phrases — split_labels","text":"function similar split_pref_suff() returns list. However, function's list detailed split_pref_suff(). return value function list first named item prefix (name noun) followed objects prepositional phrases (names prepositions precede objects).","code":""},{"path":"/reference/split_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split row and column labels into nouns and prepositional phrases — split_labels","text":"","code":"split_labels(   labels,   notation = RCLabels::bracket_notation,   prepositions = RCLabels::prepositions )"},{"path":"/reference/split_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split row and column labels into nouns and prepositional phrases — split_labels","text":"labels row column labels prepositional phrases extracted. notation notation object describes labels. Default RCLabels::bracket_notation. prepositions vector strings treated prepositions. Note space appended word internally, , e.g., \"\" becomes \"\". Default RCLabels::prepositions.","code":""},{"path":"/reference/split_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split row and column labels into nouns and prepositional phrases — split_labels","text":"list lists items named noun pp.","code":""},{"path":"/reference/split_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split row and column labels into nouns and prepositional phrases — split_labels","text":"Unlike split_pref_suff(), make sense transpose argument split_labels(). Labels may structure, e.g., may different prepositions.","code":""},{"path":"/reference/split_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split row and column labels into nouns and prepositional phrases — split_labels","text":"","code":"split_labels(c(\"a [of b in c]\", \"d [of e into f]\"),              notation = bracket_notation) #> [[1]] #> noun   of   in  #>  \"a\"  \"b\"  \"c\"  #>  #> [[2]] #> noun   of into  #>  \"d\"  \"e\"  \"f\"  #>"},{"path":"/reference/to_notation.html","id":null,"dir":"Reference","previous_headings":"","what":"To notation — to_notation","title":"To notation — to_notation","text":"description notation.","code":""},{"path":"/reference/to_notation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"To notation — to_notation","text":"","code":"to_notation"},{"path":"/reference/to_notation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"To notation — to_notation","text":"vector notational symbols provides (\"[b]\") notation.","code":""},{"path":"/reference/to_notation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"To notation — to_notation","text":"","code":"to_notation #> pref_start   pref_end suff_start   suff_end  #>         \"\"    \" [to \"    \" [to \"        \"]\""},{"path":"/news/index.html","id":"rclabels-011-2022-03-05-doi","dir":"Changelog","previous_headings":"","what":"RCLabels 0.1.1 (2022-03-05)","title":"RCLabels 0.1.1 (2022-03-05)","text":"CRAN release: 2022-03-05 Added backward compatibility previous versions R via reverting magrittr pipe (%>%) system pipe (|>). Added new notation type first_dot_notation. Now 225 tests, passing. Test coverage remains 100%.","code":""},{"path":"/news/index.html","id":"rclabels-010-2022-01-03-doi","dir":"Changelog","previous_headings":"","what":"RCLabels 0.1.0 (2022-01-03)","title":"RCLabels 0.1.0 (2022-01-03)","text":"CRAN release: 2022-01-04 First version used packages, bumping v0.1.0. get_piece(labels = NULL) now returns NULL, expected. return values get_piece() now named appropriately. Added new options piece argument get_piece(): “pps”, “prepositions”, “objects”. RCLabels::prepositions now vector instead list, thereby making downstream use object clearer. keep_pref_suff() –> get_pref_suff() bring consistency get_piece(). keep –> argument name get_pref_suff() bring consistency functions. New wrapper function get_piece() returns requested piece label. Added note README.Rmd installing CRAN. Added project status badge. Added CRAN status badge. Now 216 tests, passing. Test coverage remains 100%.","code":""},{"path":"/news/index.html","id":"rclabels-004-2021-12-06","dir":"Changelog","previous_headings":"","what":"RCLabels 0.0.4 (2021-12-06)","title":"RCLabels 0.0.4 (2021-12-06)","text":"CRAN release: 2021-12-06 New function replace_by_pattern(). New function match_by_pattern(). First CRAN release. 187 tests, passing. Test coverage remains 100 %.","code":""},{"path":"/news/index.html","id":"rclabels-003","dir":"Changelog","previous_headings":"","what":"RCLabels 0.0.3","title":"RCLabels 0.0.3","text":"Added code coverage. Added automated spell checking package. 156 tests, passing. Test coverage remains 100 %.","code":""},{"path":"/news/index.html","id":"rclabels-002","dir":"Changelog","previous_headings":"","what":"RCLabels 0.0.2","title":"RCLabels 0.0.2","text":"First release. Added GitHub pages site. Added vignette. Added extraction functions. Added NEWS.md file track changes package. Refactoring many functions IEATools. 156 tests, passing. Test coverage 100 %.","code":""},{"path":"/news/index.html","id":"rclabels-001","dir":"Changelog","previous_headings":"","what":"RCLabels 0.0.1","title":"RCLabels 0.0.1","text":"First commit.","code":""}]
